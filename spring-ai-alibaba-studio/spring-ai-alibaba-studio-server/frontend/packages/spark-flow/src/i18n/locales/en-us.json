{
  "spark-flow.components.BaseNode.index.copySuccess": "Successfully copied!",
  "spark-flow.components.BaseNode.index.copy": "Copy",
  "spark-flow.components.BaseNode.index.delete": "Delete",
  "spark-flow.components.BaseNode.index.debug": "Debug",
  "spark-flow.components.BaseNode.index.whenError": "when errors occurred",
  "spark-flow.components.BaseNode.index.errorBranch": "Error branch",
  "spark-flow.components.CheckListBtn.index.checklistVar1": "Checklist · {var1}",
  "spark-flow.components.CheckListBtn.index.allResolved": "All items in the checklist have been resolved",
  "spark-flow.components.CodeInput.index.arrayEmpty": "Array(Empty)",
  "spark-flow.components.CodeInput.index.arrayMixed": "Array<Multiple types>",
  "spark-flow.components.CodeInput.index.fileObject": "File-style object",
  "spark-flow.components.CodeInput.index.expectArrayGotVar1": "Expected array, but {var1} received",
  "spark-flow.components.CodeInput.index.arrayItemNotObjectVar1Var2": "The {var1} item in the array is not an object type, but {var2}",
  "spark-flow.components.CodeInput.index.arrayItemNotStringVar1Var2": "The {var1} item in the array is not a string type, but {var2}",
  "spark-flow.components.CodeInput.index.arrayItemNotNumberVar1Var2": "The {var1} item in the array is not a number type, but {var2}",
  "spark-flow.components.CodeInput.index.arrayItemNotBooleanVar1Var2": "The {var1} item in the array is not a boolean type, but {var2}",
  "spark-flow.components.CodeInput.index.arrayItemNotFileVar1Var2": "The {var1} item in the array is not a file type, but {var2}",
  "spark-flow.components.CodeInput.index.expectObjectGotVar1": "Expected object, but {var1} received",
  "spark-flow.components.CodeInput.index.expectStringGotVar1": "Expected string, but {var1} received",
  "spark-flow.components.CodeInput.index.expectNumberGotVar1": "Expected number, but {var1} received",
  "spark-flow.components.CodeInput.index.expectBooleanGotVar1": "Expected boolean, but {var1} received",
  "spark-flow.components.CodeInput.index.expectFileGotVar1": "Expected file, but {var1} received",
  "spark-flow.components.CodeInput.index.jsonParseErrorVar1": "JSON parsing error: {var1}",
  "spark-flow.components.CustomInputsControl.index.selectVariable": "Select variable",
  "spark-flow.components.CustomInputsControl.index.noInputNeeded": "No input value is required",
  "spark-flow.components.CustomInputsControl.index.reference": "Reference",
  "spark-flow.components.CustomInputsControl.index.input": "Input",
  "spark-flow.components.CustomInputsControl.index.variableName": "Name",
  "spark-flow.components.CustomInputsControl.index.referenceType": "Source",
  "spark-flow.components.CustomInputsControl.index.value": "Value",
  "spark-flow.components.CustomInputsControl.index.enterVariableName": "Enter Name",
  "spark-flow.components.CustomInputsControl.index.addVariable": "Add",
  "spark-flow.components.CustomOutputsForm.index.selectVariableType": "Select variable type",
  "spark-flow.components.CustomOutputsForm.index.enterVariableName": "Enter Name",
  "spark-flow.components.CustomOutputsForm.index.enterVariableDescription": "Enter Description",
  "spark-flow.components.CustomOutputsForm.index.addVariable": "Add",
  "spark-flow.components.CustomOutputsForm.index.addSubVariable": "Add sub variable",
  "spark-flow.components.CustomOutputsForm.index.variableName": "Name",
  "spark-flow.components.CustomOutputsForm.index.type": "Type",
  "spark-flow.components.CustomOutputsForm.index.description": "Description",
  "spark-flow.components.FlowAside.index.nodeManagement": "Node",
  "spark-flow.components.FlowAside.index.nodeLibrary": "Library",
  "spark-flow.components.FlowAside.index.current": "Current",
  "spark-flow.components.FlowPanel.ConfigPanel.copySuccess": "Successful",
  "spark-flow.components.FlowPanel.ConfigPanel.enterNodeName": "Enter node name",
  "spark-flow.components.FlowPanel.ConfigPanel.nodeNameExists": "Node name already exists",
  "spark-flow.components.FlowPanel.ConfigPanel.enterDescription": "Enter description...",
  "spark-flow.components.FlowPanel.ConfigPanel.nodeNameConfig": "【Node name】Configuration",
  "spark-flow.components.FlowPanel.ConfigPanel.debug": "Debug",
  "spark-flow.components.FlowPanel.ConfigPanel.rename": "Rename",
  "spark-flow.components.FlowPanel.ConfigPanel.copy": "Copy",
  "spark-flow.components.FlowPanel.ConfigPanel.delete": "Delete",
  "spark-flow.components.FlowPanel.ConfigPanel.pleaseConfigureFirst": "Please configure",
  "spark-flow.components.FlowTools.AddNodeBtn.addNode": "Add node",
  "spark-flow.components.FlowTools.HistoryBtn.undo": "Undo",
  "spark-flow.components.FlowTools.HistoryBtn.redo": "Redo",
  "spark-flow.components.FlowTools.LayoutBtn.optimizeLayout": "Layout Optimization",
  "spark-flow.components.FlowTools.MiniMapBtn.miniMap": "Thumbnail",
  "spark-flow.components.FlowTools.ScaleBtn.autoView": "Adaptive view",
  "spark-flow.components.FlowTools.ScaleBtn.scale": "Zoom out",
  "spark-flow.components.FlowTools.ShortKeyBtn.shortcutKeys": "Shortcut",
  "spark-flow.components.FlowTools.ShortKeyContent.command": "⌘",
  "spark-flow.components.FlowTools.ShortKeyContent.shift": "⇧",
  "spark-flow.components.FlowTools.ShortKeyContent.moveCanvas": "Move canvas",
  "spark-flow.components.FlowTools.ShortKeyContent.spacebar": "Space",
  "spark-flow.components.FlowTools.ShortKeyContent.drag": "Drag",
  "spark-flow.components.FlowTools.ShortKeyContent.zoomIn": "Zoom in",
  "spark-flow.components.FlowTools.ShortKeyContent.scroll": "Scroll",
  "spark-flow.components.FlowTools.ShortKeyContent.or": "Or",
  "spark-flow.components.FlowTools.ShortKeyContent.zoomOut": "Zoom out",
  "spark-flow.components.FlowTools.ShortKeyContent.undo": "Undo",
  "spark-flow.components.FlowTools.ShortKeyContent.redo": "Redo",
  "spark-flow.components.FlowTools.ShortKeyContent.delete": "Delete",
  "spark-flow.components.FlowTools.ShortKeyContent.backspace": "Backspace",
  "spark-flow.components.FlowTools.TouchModeBtn.mouseFriendlyMode": "Mouse-friendly",
  "spark-flow.components.FlowTools.TouchModeBtn.mouseLeftDragCanvasZoom": "Drag canvas with the left mouse button, scroll wheel to zoom.",
  "spark-flow.components.FlowTools.TouchModeBtn.touchpadFriendlyMode": "Trackpad-friendly",
  "spark-flow.components.FlowTools.TouchModeBtn.twoFingersMoveDragTwoFingersOpenZoom": "Two fingers moving to drag, two fingers spreading to zoom",
  "spark-flow.components.NodeMenu.index.ungrouped": "Ungrouped",
  "spark-flow.components.NodeMenu.index.searchNodeName": "Search",
  "spark-flow.components.NodeResultPanel.index.success": "Succeed",
  "spark-flow.components.NodeResultPanel.index.executing": "Executing",
  "spark-flow.components.NodeResultPanel.index.skipped": "Skipped",
  "spark-flow.components.NodeResultPanel.index.failed": "Failed",
  "spark-flow.components.NodeResultPanel.index.stopped": "Stopped",
  "spark-flow.components.NodeResultPanel.index.paused": "Paused",
  "spark-flow.components.NodeResultPanel.index.input": "Input",
  "spark-flow.components.NodeResultPanel.index.output": "Output",
  "spark-flow.components.NodeTree.index.searchNodeName": "Search",
  "spark-flow.components.ShortMemoryForm.index.nodeCache": "Node cache",
  "spark-flow.components.ShortMemoryForm.index.customCache": "Custom cache",
  "spark-flow.components.ShortMemoryForm.index.memory": "Memory",
  "spark-flow.components.TaskStatus.index.runSuccess": "Successful",
  "spark-flow.components.TaskStatus.index.running": "Running",
  "spark-flow.components.TaskStatus.index.skipped": "Skipped",
  "spark-flow.components.TaskStatus.index.runFailed": "Failed",
  "spark-flow.components.TaskStatus.index.stopped": "Stopped",
  "spark-flow.components.TaskStatus.index.paused": "Paused",
  "spark-flow.components.TaskStatus.index.requestIdCopied": "Request ID Copied",
  "spark-flow.components.TaskStatus.index.nodeId": "Node ID",
  "spark-flow.components.TaskStatus.index.nodeType": "Node Type",
  "spark-flow.components.TaskStatus.index.inputTokens": "Input Tokens",
  "spark-flow.components.TaskStatus.index.outputTokens": "Output Tokens",
  "spark-flow.components.TaskStatus.index.tokenDetails": "Token Details",
  "spark-flow.components.TaskStatus.index.hideTestResult": "Hide Test Result",
  "spark-flow.components.TaskStatus.index.showTestResult": "Show Test Result",
  "spark-flow.components.VarInputTextArea.index.maxInputChars": "Maximum {var1} Characters",
  "spark-flow.components.VarInputTextArea.index.invalidVariable": "Invalid Variable",
  "spark-flow.components.VarInputTextArea.index.builtinVariable": "Built-in Variable",
  "spark-flow.components.VarInputTextArea.index.conversationVariable": "Conversation Variable",
  "spark-flow.components.VarInputTextArea.index.insertVariableWithSlash": "Type \"/\" to Insert Variable",
  "spark-flow.components.VariableInput.index.inputVariableValue": "Input Variable Value",
  "spark-flow.components.VariableInput.index.select": "Select",
  "spark-flow.components.VariableInput.index.yes": "Yes",
  "spark-flow.components.VariableInput.index.no": "No",
  "spark-flow.demos.spark-flow-1.components.ErrorCatchForm.index.defaultValue": "Default Value",
  "spark-flow.demos.spark-flow-1.components.ErrorCatchForm.index.defaultOutputWhenExceptionOccurs": "Specify Default Output When Exception Occurs",
  "spark-flow.demos.spark-flow-1.components.ErrorCatchForm.index.exceptionBranch": "Exceptional Branch",
  "spark-flow.demos.spark-flow-1.components.ErrorCatchForm.index.executeExceptionBranchWhenExceptionOccurs": "Execute Exceptional Branch When Exception Occurs",
  "spark-flow.demos.spark-flow-1.components.ErrorCatchForm.index.exceptionHandling": "Exceptional Handling",
  "spark-flow.demos.spark-flow-1.components.ErrorCatchForm.index.handlingMethod": "Handling Method",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.editParameter": "Edit Parameter",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.addParameter": "Add Parameter",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.name": "Name",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.enterParameterName": "Enter Parameter Name",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.mustContainLettersNumbersUnderscoresAndDollarAndCannotStartWithNumber": "Can only contain Letters, Numbers, Underscores and $, and Cannot Start With a Number",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.parameterNameAlreadyExists": "Parameter Name Already Exists",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.enter": "Enter",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.type": "Type",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.selectParameterType": "Select Parameter Type",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.selectType": "Select Type",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.description": "Description",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.enterParameterDescription": "Enter Parameter Description",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.parameterDescription": "Parameter Description",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.required": "Required",
  "spark-flow.demos.spark-flow-1.components.ExtractParamEditModal.index.requiredIsForModelInferenceReferenceOnlyNotForMandatoryValidationOfParameterOutput": "Required Parameter is for LLM Only, Not for Validation of Output.",
  "spark-flow.demos.spark-flow-1.components.ExtractParamItem.index.required": "Required",
  "spark-flow.demos.spark-flow-1.components.ExtractParamItem.index.notRequired": "Not Required",
  "spark-flow.demos.spark-flow-1.components.GroupVariableForm.index.reference": "Reference",
  "spark-flow.demos.spark-flow-1.components.GroupVariableForm.index.input": "Input",
  "spark-flow.demos.spark-flow-1.components.GroupVariableForm.index.referenceMethod": "Source",
  "spark-flow.demos.spark-flow-1.components.GroupVariableForm.index.variable": "Variable",
  "spark-flow.demos.spark-flow-1.components.ModelConfigForm.index.selectModelFirst": "Please Select Model",
  "spark-flow.demos.spark-flow-1.components.ModelConfigForm.index.selectModel": "Please Select Model",
  "spark-flow.demos.spark-flow-1.components.ModelConfigForm.index.visual": "Vision",
  "spark-flow.demos.spark-flow-1.components.ModelConfigForm.index.variable": "Variable",
  "spark-flow.demos.spark-flow-1.components.RetryForm.index.retryOnFailure": "Retry on Failure",
  "spark-flow.demos.spark-flow-1.components.RetryForm.index.maxRetryTimes": "Max Retries",
  "spark-flow.demos.spark-flow-1.components.RetryForm.index.retryInterval": "Retry Interval",
  "spark-flow.demos.spark-flow-1.components.ShortMemoryForm.index.nodeCache": "Node Cache",
  "spark-flow.demos.spark-flow-1.components.ShortMemoryForm.index.customCache": "Custom Cache",
  "spark-flow.demos.spark-flow-1.components.ShortMemoryForm.index.memory": "Memory",
  "spark-flow.demos.spark-flow-1.components.SingleNodeDrawer.index.testRun": "Run",
  "spark-flow.demos.spark-flow-1.components.SingleNodeDrawer.index.inputVariables": "Input",
  "spark-flow.demos.spark-flow-1.components.SingleNodeDrawer.index.variableDescription": "Description",
  "spark-flow.demos.spark-flow-1.components.SingleNodeDrawer.index.run": "Run",
  "spark-flow.demos.spark-flow-1.components.SingleNodeDrawer.index.reset": "Reset",
  "spark-flow.demos.spark-flow-1.components.TestPanel.index.testPanel": "Test Panel",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.canvasConfiguration": "Canvas",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.publishChannels": "Publish",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.end": "End",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.hello": "Hello",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.helloSysQueryUser": "{\"sys\":{\"query\":\"Hello\"},\"user\":{}}",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.start": "Start",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.startInput": "{\"input\":{\"provider\":\"87a5a76e\",\"modelId\":\"qwen-max\",\"messages\":[{\"message_type\":\"SYSTEM\",\"metadata\":{\"messageType\":\"SYSTEM\"},\"text\":\"You are an assistant\"},{\"message_type\":\"USER\",\"metadata\":{\"messageType\":\"USER\"},\"media\":[],\"text\":\"Hello\"}],\"params\":{}}}",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.startOutput": "{\"output\":\"Hello! How can I assist you?\"}",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.largeModel1": "LLM 1",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.helloWhatCanIHelpYou": "Hello! How can I assist you?",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.test": "Run",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.displayTestResults": "Display Test Results",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.publish": "Publish",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.start": "Start",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.startNode": "Start",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.basic": "Basic",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.end": "End",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.endNode": "End",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.largeModel": "LLM",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.largeModelNode": "LLM",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.interaction": "Interaction",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.processOutput": "Output",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.processOutputNode": "Output",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.script": "Script",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.scriptNode": "Script",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.logic": "Logic",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.conditionJudgment": "If/Else",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.judgmentNode": "If/Else",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.defaultCondition": "Default",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.intentionClassification": "Intention Classifier",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.intentionClassificationNode": "Intention Classifier",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.outputResult": "Output",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.thinkingProcess": "Thinking",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.hitTheme": "Hit Theme",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.loop": "Loop",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.iterationNode": "Iteration",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.variableProcessing": "Variable Processing",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.textTransformationNode": "Text Transformation Node",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.variable": "Variable",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.variableAssignment": "Variable Assignment",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.variableAssignmentNode": "Variable Assignment Node",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.parameterExtraction": "Parameter Extraction",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.parameterExtractionNode": "Parameter Extraction Node",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.city": "City",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.date": "Date",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.apiNode": "API",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.tool": "Tool",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.iterationStart": "Iteration Start",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.iterationStartNode": "Iteration Start Node",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.iterationEnd": "Iteration End",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.system": "System",
  "spark-flow.demos.spark-flow-1.constant.NodeSchema.systemNode": "System Node",
  "spark-flow.demos.spark-flow-1.constant.index.textOutput": "Text",
  "spark-flow.demos.spark-flow-1.constant.index.listOutput": "List Output",
  "spark-flow.demos.spark-flow-1.constant.index.name": "Name",
  "spark-flow.demos.spark-flow-1.constant.index.age": "Age",
  "spark-flow.demos.spark-flow-1.constant.mock.openAiProvider": "OpenAI Provider",
  "spark-flow.demos.spark-flow-1.constant.mock.largeLanguageModel": "LLM",
  "spark-flow.demos.spark-flow-1.constant.mock.temperature": "Temperature",
  "spark-flow.demos.spark-flow-1.constant.mock.controlModelOutputRandomness": "Control Randomness of Model",
  "spark-flow.demos.spark-flow-1.constant.mock.maxTokens": "Max Tokens",
  "spark-flow.demos.spark-flow-1.constant.mock.maximumLengthOfGeneratedText": "Maximum Length",
  "spark-flow.demos.spark-flow-1.index.start": "Start",
  "spark-flow.demos.spark-flow-1.index.city": "City",
  "spark-flow.demos.spark-flow-1.index.date": "Date",
  "spark-flow.demos.spark-flow-1.index.end": "End",
  "spark-flow.demos.spark-flow-1.index.largeModel1": "LLM 1",
  "spark-flow.demos.spark-flow-1.index.textOutput": "Text",
  "spark-flow.demos.spark-flow-1.index.youAreAAssistant": "You Are A Assistant",
  "spark-flow.demos.spark-flow-1.index.addNode": "Add",
  "spark-flow.demos.spark-flow-1.index.enterNodeName": "Please Enter Name",
  "spark-flow.demos.spark-flow-1.nodes.Api.panel.apiUrl": "API URL",
  "spark-flow.demos.spark-flow-1.nodes.Api.panel.authorization": "Authorization",
  "spark-flow.demos.spark-flow-1.nodes.Api.panel.none": "(None)",
  "spark-flow.demos.spark-flow-1.nodes.Api.panel.headerSettings": "Header",
  "spark-flow.demos.spark-flow-1.nodes.Api.panel.bodySettings": "Body",
  "spark-flow.demos.spark-flow-1.nodes.Api.panel.output": "Output",
  "spark-flow.demos.spark-flow-1.nodes.Api.panel.rawData": "Raw Data",
  "spark-flow.demos.spark-flow-1.nodes.Api.panel.jsonData": "JSON",
  "spark-flow.demos.spark-flow-1.nodes.Classify.node.default": "Default",
  "spark-flow.demos.spark-flow-1.nodes.Classify.node.noIntentionConfigured": "No Intention Configured",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.fastMode": "Fast Mode",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.classificationModelAvoidsThinkingProcessToImproveSpeed适用于SimpleScenarios": "Classification Model Avoids Thinking To Improve Speed, Suitable For Simple Cases",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.efficiencyMode": "Efficiency Mode",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.classificationModelThinksStepByStepToMatchCorrespondingClassificationMoreAccurately": "Classification Model Thinks Step By Step To Match Corresponding Classification More Accurately",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.input": "Input",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.intentionClassification": "Intention Classifier",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.addIntention(": "Add Intention (",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.otherIntention": "Other",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.thinkingMode": "Thinking Mode",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.prompt": "Prompt",
  "spark-flow.demos.spark-flow-1.nodes.Classify.panel.output": "Output",
  "spark-flow.demos.spark-flow-1.nodes.LLM.panel.modelSelection": "Select Model",
  "spark-flow.demos.spark-flow-1.nodes.LLM.panel.prompt": "Prompt",
  "spark-flow.demos.spark-flow-1.nodes.LLM.panel.userPrompt": "User Prompt",
  "spark-flow.demos.spark-flow-1.nodes.LLM.panel.output": "Output",
  "spark-flow.demos.spark-flow-1.nodes.Output.panel.outputContent": "Output",
  "spark-flow.demos.spark-flow-1.nodes.Output.panel.streamOutput": "Stream",
  "spark-flow.demos.spark-flow-1.nodes.ParameterExtractor.panel.input": "Input",
  "spark-flow.demos.spark-flow-1.nodes.ParameterExtractor.panel.extractParameters": "Extract Parameters",
  "spark-flow.demos.spark-flow-1.nodes.ParameterExtractor.panel.addVariable": "Add",
  "spark-flow.demos.spark-flow-1.nodes.ParameterExtractor.panel.prompt": "Prompt",
  "spark-flow.demos.spark-flow-1.nodes.ParameterExtractor.panel.output": "Output",
  "spark-flow.demos.spark-flow-1.nodes.Script.panel.input": "Input",
  "spark-flow.demos.spark-flow-1.nodes.Script.panel.code": "Code",
  "spark-flow.demos.spark-flow-1.nodes.Script.panel.fullScreenEditing": "Full Screen",
  "spark-flow.demos.spark-flow-1.nodes.Script.panel.outputVariables": "output",
  "spark-flow.demos.spark-flow-1.nodes.Start.panel.input": "Input",
  "spark-flow.demos.spark-flow-1.nodes.Start.panel.customVariables": "Custom Variable",
  "spark-flow.demos.spark-flow-1.nodes.Start.panel.variable": "Built-in Variable",
  "spark-flow.demos.spark-flow-1.nodes.Start.panel.userQuery": "User query",
  "spark-flow.demos.spark-flow-1.nodes.VariableAssign.panel.setVariable": "Set variable",
  "spark-flow.demos.spark-flow-1.nodes.VariableAssign.panel.variable": "Variable",
  "spark-flow.demos.spark-flow-1.nodes.VariableAssign.panel.setValue": "Set value",
  "spark-flow.demos.spark-flow-1.nodes.VariableAssign.panel.addVariable": "Add",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.aggregateGroup": "Aggregate group",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.textOutput": "Text",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.jsonOutput": "Json",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.returnFirstNonEmptyValue": "Return first non-empty value in each group",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.returnLastNonEmptyValue": "Return last non-empty value in each group",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.enterGroupName": "Please enter group name",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.groupNameExists": "Group name already exists",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.onlyLettersDigitsUnderscoreAndDollar": "Can only contain letters, numbers, underscores and $, and cannot start with a number",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.outputMode": "Output",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.groupingStrategy": "Grouping strategy",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.addGroup": "Add group",
  "spark-flow.demos.spark-flow-1.nodes.VariableHandle.panel.output": "Output",
  "spark-flow.demos.spark-flow-1.nodes.configPanelsMap.unsupportedNode": "Unsupported node",
  "spark-flow.flow.index.systemNodeCannotBeDeleted": "System nodes cannot be deleted",
  "spark-flow.hooks.useNodesInteraction.sameSubCanvasOnly": "Can only connect to nodes in the same sub canvas",
  "spark-flow.hooks.useNodesInteraction.cannotConnectToSelf": "Cannot connect to oneself",
  "spark-flow.hooks.useNodesInteraction.cannotFormLoop": "Cannot form a loop",
  "spark-flow.hooks.useNodesInteraction.subCanvasCannotNest": "Sub canvases cannot be nested",
  "spark-flow.hooks.useNodesInteraction.copySuccess": "Successful",
  "spark-flow.hooks.useNodesOutputParams.builtinVariable": "Built-in Variable",
  "spark-flow.components.CodeInput.index.jsonEdit": "Json edit",
  "spark-flow.demos.spark-flow-1.components.WorkFlowHeader.index.clear": "Clear",
  "spark-flow.ScriptEditModal.index.scriptConversionCodeEditor": "Script conversion: Code editor",
  "spark-flow.JudgeForm.index.newConditionGroup": "New condition group",
  "spark-flow.JudgeForm.index.addCondition": "Add condition",
  "spark-flow.JudgeForm.index.addConditionGroup": "Add condition group",
  "spark-flow.BranchTitleHeader.index.conditionGroupNameEmpty": "Condition group name cannot be empty",
  "spark-flow.BranchTitleHeader.index.conditionGroupNameExists": "Condition group name already exists",
  "spark-flow.BranchTitleHeader.index.enterConditionGroupName": "Please enter condition group name",
  "spark-flow.BranchTitleHeader.index.whenSatisfy": "When met",
  "spark-flow.BranchTitleHeader.index.all": "All",
  "spark-flow.BranchTitleHeader.index.any": "Any",
  "spark-flow.BranchTitleHeader.index.conditions": "Condition",
  "main.pages.App.Workflow.constant.equal": "Equal",
  "main.pages.App.Workflow.constant.notEqual": "Not equal",
  "main.pages.App.Workflow.constant.empty": "Empty",
  "main.pages.App.Workflow.constant.notEmpty": "Not empty",
  "main.pages.App.Workflow.constant.greaterThan": "Greater than",
  "main.pages.App.Workflow.constant.greaterThanOrEqual": "Greater than or equal",
  "main.pages.App.Workflow.constant.lessThan": "Less than",
  "main.pages.App.Workflow.constant.lessThanOrEqual": "Less than or equal",
  "main.pages.App.Workflow.constant.lengthEqual": "Length equal",
  "main.pages.App.Workflow.constant.lengthGreaterThan": "Length greater than",
  "main.pages.App.Workflow.constant.lengthGreaterThanOrEqual": "Length greater than or equal",
  "main.pages.App.Workflow.constant.lengthLessThan": "Length less than",
  "main.pages.App.Workflow.constant.lengthLessThanOrEqual": "Length less than or equal",
  "main.pages.App.Workflow.constant.contains": "Contains",
  "main.pages.App.Workflow.constant.notContains": "Not contains",
  "main.pages.App.Workflow.constant.isTrue": "Is true",
  "main.pages.App.Workflow.constant.isFalse": "Is false"
}
