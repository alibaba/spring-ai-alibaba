openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: chat-client
  description: the chat-client API
- name: chat-model
  description: the chat-model API
- name: dsl
  description: the DSL API
paths:
  /studio/api/dsl/import:
    post:
      tags:
      - dsl
      summary: import app from dsl
      operationId: importDSL
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DSLParam"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RApp"
  /studio/api/chat-models:
    get:
      tags:
      - chat-model
      summary: list chat models
      operationId: list
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RListChatModel"
    post:
      tags:
      - chat-model
      summary: run chat model by input
      operationId: run
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunActionParam"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/RChatModelRunResult"
  /studio/api/chat-models/run/image-gen:
    post:
      tags:
      - chat-model
      summary: run image model by input
      operationId: runImageGenTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunActionParam"
        required: true
      responses:
        "200":
          description: OK
  /studio/api/dsl/export/{id}:
    get:
      tags:
      - dsl
      summary: export app to dsl
      operationId: exportDSL
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: dialect
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RString"
  /studio/api/chat-models/{modelName}:
    get:
      tags:
      - chat-model
      summary: get chat model by model name
      operationId: get
      parameters:
      - name: modelName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RChatModel"
  /studio/api/chat-clients:
    get:
      tags:
      - chat-client
      summary: list chat clients
      operationId: list_1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RListChatClient"
  /studio/api/chat-clients/{clientName}:
    get:
      tags:
      - chat-client
      summary: get chat client by name
      operationId: get_1
      parameters:
      - name: clientName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RChatClient"
  /ai/stream:
    get:
      tags:
      - chat-controller
      operationId: stream
      parameters:
      - name: input
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /ai/streamByModel:
    get:
      tags:
      - chat-controller
      operationId: streamByModel
      parameters:
      - name: input
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /ai/chat:
    get:
      tags:
      - chat-controller
      operationId: chat
      parameters:
      - name: input
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /ai/chatByModel:
    get:
      tags:
      - chat-controller
      operationId: chatByModel
      parameters:
      - name: input
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    DSLParam:
      type: object
      properties:
        content:
          type: string
          description: dsl raw content
        dialect:
          type: string
          description: dsl dialect
    App:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/AppMetadata"
        spec:
          type: object
    AppMetadata:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        mode:
          type: string
    RApp:
      type: object
      properties:
        code:
          type: integer
          format: int32
        msg:
          type: string
        data:
          $ref: "#/components/schemas/App"
        timestamp:
          type: integer
          format: int64
    DashScopeChatOptions:
      type: object
      properties:
        presencePenalty:
          type: number
          format: double
        maxTokens:
          type: integer
          format: int32
        frequencyPenalty:
          type: number
          format: double
        stopSequences:
          type: array
          items:
            type: string
        proxyToolCalls:
          type: boolean
        model:
          type: string
        temperature:
          type: number
          format: double
        seed:
          type: integer
          format: int32
        top_p:
          type: number
          format: double
        top_k:
          type: integer
          format: int32
        stop:
          type: array
          items:
            type: object
        enable_search:
          type: boolean
        incremental_output:
          type: boolean
        repetition_penalty:
          type: number
          format: double
        tools:
          type: array
          items:
            $ref: "#/components/schemas/FunctionTool"
        tool_choice:
          type: object
        vl_high_resolution_images:
          type: boolean
        multi_model:
          type: boolean
      description: chat model config
      nullable: true
    DashScopeImageOptions:
      type: object
      properties:
        responseFormat:
          type: string
        model:
          type: string
        "n":
          type: integer
          format: int32
        size_width:
          type: integer
          format: int32
        size_height:
          type: integer
          format: int32
        size:
          type: string
        style:
          type: string
        seed:
          type: integer
          format: int32
        ref_img:
          type: string
        ref_strength:
          type: number
          format: float
        ref_mode:
          type: string
        negative_prompt:
          type: string
      description: image model config
      nullable: true
    Function:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: object
    FunctionTool:
      type: object
      properties:
        type:
          type: string
          enum:
          - function
        function:
          $ref: "#/components/schemas/Function"
    RunActionParam:
      type: object
      properties:
        key:
          type: string
          description: "action key, bean name"
        input:
          type: string
          description: user input
        prompt:
          type: string
          description: system prompt
        useChatModel:
          type: boolean
          description: "use chat model, is use, will be enable chat memory"
          default: false
        stream:
          type: boolean
          description: use stream response
          default: false
        chatOptions:
          $ref: "#/components/schemas/DashScopeChatOptions"
        imageOptions:
          $ref: "#/components/schemas/DashScopeImageOptions"
    ActionResult:
      type: object
      properties:
        streamResponse:
          type: array
          description: stream response
          nullable: true
          items:
            type: string
            description: stream response
            nullable: true
        response:
          type: string
    ChatModelRunResult:
      type: object
      properties:
        input:
          $ref: "#/components/schemas/RunActionParam"
        result:
          $ref: "#/components/schemas/ActionResult"
        telemetry:
          $ref: "#/components/schemas/TelemetryResult"
    RChatModelRunResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
        msg:
          type: string
        data:
          $ref: "#/components/schemas/ChatModelRunResult"
        timestamp:
          type: integer
          format: int64
    TelemetryResult:
      type: object
      properties:
        traceId:
          type: string
    RString:
      type: object
      properties:
        code:
          type: integer
          format: int32
        msg:
          type: string
        data:
          type: string
        timestamp:
          type: integer
          format: int64
    ChatModel:
      type: object
      properties:
        name:
          type: string
          description: ChatModel bean name
        model:
          type: string
          description: dashscope model name
        modelType:
          type: string
          enum:
          - CHAT
          - IMAGE
          - AUDIO
        chatOptions:
          $ref: "#/components/schemas/DashScopeChatOptions"
        imageOptions:
          $ref: "#/components/schemas/DashScopeImageOptions"
    RListChatModel:
      type: object
      properties:
        code:
          type: integer
          format: int32
        msg:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/ChatModel"
        timestamp:
          type: integer
          format: int64
    RChatModel:
      type: object
      properties:
        code:
          type: integer
          format: int32
        msg:
          type: string
        data:
          $ref: "#/components/schemas/ChatModel"
        timestamp:
          type: integer
          format: int64
    ChatClient:
      type: object
    RListChatClient:
      type: object
      properties:
        code:
          type: integer
          format: int32
        msg:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/ChatClient"
        timestamp:
          type: integer
          format: int64
    RChatClient:
      type: object
      properties:
        code:
          type: integer
          format: int32
        msg:
          type: string
        data:
          $ref: "#/components/schemas/ChatClient"
        timestamp:
          type: integer
          format: int64
