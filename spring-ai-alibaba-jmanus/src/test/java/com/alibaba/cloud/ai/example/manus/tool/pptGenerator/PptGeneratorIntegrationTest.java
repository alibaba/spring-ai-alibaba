/*
 * Copyright 2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alibaba.cloud.ai.example.manus.tool.pptGenerator;

import com.alibaba.cloud.ai.example.manus.tool.code.ToolExecuteResult;
import com.alibaba.cloud.ai.example.manus.tool.filesystem.UnifiedDirectoryManager;
import com.alibaba.cloud.ai.example.manus.tool.ToolPromptManager;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.JsonNode;

import java.lang.reflect.Field;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

/**
 * Simplified PPT generator integration test
 */
public class PptGeneratorIntegrationTest {

	private PptGeneratorService pptGeneratorService;

	private ObjectMapper objectMapper;

	private ToolPromptManager toolPromptManager;

	private UnifiedDirectoryManager unifiedDirectoryManager;

	private PptGeneratorOperator pptGeneratorOperator;

	// @TempDir
	Path tempDir;

	@BeforeEach
	void setUp() {
		System.out.println("===== Starting test preparation =====");
		pptGeneratorService = new PptGeneratorService();
		System.out.println("Initializing PptGeneratorService complete");
		objectMapper = new ObjectMapper();
		System.out.println("Initializing ObjectMapper complete");
		toolPromptManager = mock(ToolPromptManager.class);
		System.out.println("Initializing ToolPromptManager mock complete");
		unifiedDirectoryManager = mock(UnifiedDirectoryManager.class);
		System.out.println("Initializing UnifiedDirectoryManager mock complete");

		// Inject unifiedDirectoryManager using reflection
		try {
			Field field = PptGeneratorService.class.getDeclaredField("unifiedDirectoryManager");
			field.setAccessible(true);
			field.set(pptGeneratorService, unifiedDirectoryManager);
			System.out.println("Successfully injected UnifiedDirectoryManager into PptGeneratorService");
		}
		catch (Exception e) {
			throw new RuntimeException("Failed to inject unifiedDirectoryManager", e);
		}

		pptGeneratorOperator = new PptGeneratorOperator(pptGeneratorService, objectMapper, toolPromptManager,
				unifiedDirectoryManager);
		System.out.println("Initializing PptGeneratorOperator complete");

		// Set tempDir to a real path
		tempDir = Path.of("./");
		System.out.println("Setting test output directory: " + tempDir);

		// Setup mock behavior
		when(toolPromptManager.getToolDescription("pptGenerator")).thenReturn("PPT Generator Tool");
		when(toolPromptManager.getToolParameters("pptGenerator")).thenReturn("PPT parameters");
		System.out.println("Setting ToolPromptManager mock behavior complete");

		// Simplify path validation for testing
		try {
			when(unifiedDirectoryManager.getSpecifiedDirectory(anyString())).thenAnswer(invocation -> {
				String path = invocation.getArgument(0);
				return tempDir.resolve(path).toAbsolutePath();
			});
			System.out.println("Setting UnifiedDirectoryManager mock behavior complete");
		}
		catch (Exception e) {
			throw new RuntimeException(e);
		}
		System.out.println("===== Test preparation complete =====");
	}

	@Test
	void testCreateBasicPptSuccessfully() throws Exception {
		System.out.println("\n===== Starting test: Create PPT with basic content =====");
		// Prepare test data
		String planId = "test-plan-123";
		String fileName = "test-2213.pptx";
		System.out.println("Preparing test data: planId=" + planId + ", fileName=" + fileName);

		PptInput input = new PptInput();
		input.setAction("create");
		input.setFileName(fileName);
		input.setTitle("Test Presentation");
		input.setSubtitle("Generated by Test");
		System.out.println("Setting PPT basic information complete: title=" + input.getTitle() + ", subtitle="
				+ input.getSubtitle());

		// Create simple slide content
		PptInput.SlideContent slide = new PptInput.SlideContent();
		slide.setTitle("First Slide");
		slide.setContent("This is content for the first slide");
		input.setSlideContents(Collections.singletonList(slide));
		System.out
			.println("Slide content setting completed: A total of " + input.getSlideContents().size() + " slides");

		// Set current plan ID
		pptGeneratorOperator.setCurrentPlanId(planId);
		System.out.println("Setting current plan ID: " + planId);

		// Execute test
		System.out.println("Starting PPT generation operation...");
		ToolExecuteResult result = pptGeneratorOperator.run(input);
		System.out.println("PPT generation operation completed");

		// Verify results
		System.out.println("Starting result verification...");
		assertNotNull(result);
		System.out.println("Verification result is not null: success");
		assertTrue(result.getOutput().contains("success"));
		System.out.println("Verification result contains success information: success");
		assertTrue(result.getOutput().contains(fileName));
		System.out.println("Verification result contains file name: success");

		// Restore file creation verification
		Path pptPath = tempDir.resolve("extensions/pptGenerator/" + fileName);
		System.out.println("Verification file creation: " + pptPath);
		assertTrue(Files.exists(pptPath));
		System.out.println("Verification file exists: success");
		assertTrue(Files.size(pptPath) > 0);
		System.out.println("Verification file size greater than 0: success");

		System.out.println("===== Test complete: Create PPT with basic content =====");
	}

	@Test
	void testCreatePptWithMinimalInput() throws Exception {
		System.out.println("\n===== Starting test: Create PPT with minimal input =====");
		// Prepare test data with minimal required fields
		String planId = "minimal-test";
		String fileName = "minimal-2213.pptx";
		System.out.println("Preparing test data: planId=" + planId + ", fileName=" + fileName);

		PptInput input = new PptInput();
		input.setAction("create");
		input.setFileName(fileName);
		input.setTitle("Minimal PPT");
		System.out.println("Setting minimal PPT information complete: title=" + input.getTitle());

		// No slides content
		input.setSlideContents(null);
		System.out.println("Setting no slide content: success");

		// Set current plan ID
		pptGeneratorOperator.setCurrentPlanId(planId);
		System.out.println("Setting current plan ID: " + planId);

		// Execute test
		System.out.println("Starting minimal PPT generation operation...");
		ToolExecuteResult result = pptGeneratorOperator.run(input);
		System.out.println("Minimal PPT generation operation completed");

		// Verify results
		System.out.println("Starting result verification...");
		assertNotNull(result);
		System.out.println("Verification result is not null: success");
		assertTrue(result.getOutput().contains("success"));
		System.out.println("Verification result contains success information: success");

		// Restore file creation verification
		Path pptPath = tempDir.resolve("extensions/pptGenerator/" + fileName);
		System.out.println("Verification file creation: " + pptPath);
		assertTrue(Files.exists(pptPath));
		System.out.println("Verification file exists: success");

		System.out.println("===== Test complete: Create PPT with minimal input =====");
	}

	@Test
	void testApplyTemplate() throws Exception {
		System.out.println("\n===== Starting test: Apply template test =====");
		// Prepare test data
		String planId = "template-list-test";
		System.out.println("Preparing test data: planId=" + planId);

		PptInput input = new PptInput();
		input.setAction("getTemplateList");
		System.out.println("Setting action to getTemplateList");

		// Set current plan ID
		pptGeneratorOperator.setCurrentPlanId(planId);
		System.out.println("Setting current plan ID: " + planId);

		// Execute test
		System.out.println("Starting getTemplateList operation...");
		ToolExecuteResult result = pptGeneratorOperator.run(input);
		System.out.println("getTemplateList operation completed");

		// Verify results
		System.out.println("Starting result verification...");
		assertNotNull(result);
		System.out.println("Verification result is not null: success");
		// Verify that the return result is a valid JSON format
		JsonNode templateListJson = null;
		try {
			templateListJson = objectMapper.readTree(result.getOutput());
			System.out.println("Verification result is valid JSON format: success");
		}
		catch (Exception e) {
			fail("Verification result is not valid JSON format: " + e.getMessage());
		}

		// Add test for the getTemplate operation
		System.out.println("Starting getTemplate operation test...");

		// Verify that the return result is a valid JSON format
		String firstTemplatePath = null;
		if (templateListJson != null && templateListJson.isObject()) {
			Iterator<Map.Entry<String, JsonNode>> fields = templateListJson.fields();
			if (fields.hasNext()) {
				Map.Entry<String, JsonNode> firstEntry = fields.next();
				JsonNode pathNode = firstEntry.getValue().get("path");
				if (pathNode != null && pathNode.isTextual()) {
					firstTemplatePath = pathNode.asText();
					System.out.println("Verification result: first template path is " + firstTemplatePath);
				}
			}
		}

		// If a template path is successfully retrieved, test the getTemplate operation
		if (firstTemplatePath != null) {
			PptInput templateInput = new PptInput();
			templateInput.setAction("getTemplate");
			templateInput.setPath(firstTemplatePath);
			System.out.println("Setting getTemplate operation, path: " + firstTemplatePath);

			// Set current plan ID
			pptGeneratorOperator.setCurrentPlanId(planId);
			System.out.println("Setting current plan ID: " + planId);

			// Execute getTemplate test
			System.out.println("Starting getTemplate operation test...");
			ToolExecuteResult templateResult = pptGeneratorOperator.run(templateInput);
			System.out.println("getTemplate operation test completed");

			// Verify results
			System.out.println("Starting result verification...");
			assertNotNull(templateResult);
			System.out.println("Verification result is not null: success");
			// Verify that the return result is a valid JSON format
			JsonNode templateJson = null;
			try {
				templateJson = objectMapper.readTree(templateResult.getOutput());
				System.out.println("Verification result is valid JSON format: success");
				System.out.println("Verification result before modification: " + templateJson.toPrettyString());
			}
			catch (Exception e) {
				fail("Verification result is not valid JSON format: " + e.getMessage());
			}

			// Modify template content, change all content elements text to Test
			if (templateJson != null && templateJson.has("slides")) {
				JsonNode slidesNode = templateJson.get("slides");
				if (slidesNode.isArray() && slidesNode.size() > 0) {
					JsonNode firstSlide = slidesNode.get(0);
					if (firstSlide.has("content") && firstSlide.get("content").isArray()) {
						ArrayNode contentArray = (ArrayNode) firstSlide.get("content");
						for (JsonNode contentItem : contentArray) {
							if (contentItem.has("text")) {
								((ObjectNode) contentItem).put("text", "Test");
							}
						}
					}
				}
			}

			// Create a new PPT using the modified template content
			assertNotNull(templateJson);
			System.out.println("Verification result after modification: " + templateJson.toPrettyString());
			String modifiedTemplateContent = objectMapper.writeValueAsString(templateJson);

			PptInput createInput = new PptInput();
			createInput.setPath(firstTemplatePath);
			createInput.setAction("create");
			String fileName = "applied-template-2213.pptx";
			createInput.setFileName(fileName);
			createInput.setTemplateContent(modifiedTemplateContent);
			System.out.println("Setting create PPT operation, using modified template content");

			// Set current plan ID
			pptGeneratorOperator.setCurrentPlanId(planId);
			System.out.println("Setting current plan ID: " + planId);

			// Execute create with template test
			System.out.println("Starting create PPT operation with template...");
			ToolExecuteResult createResult = pptGeneratorOperator.run(createInput);
			System.out.println("Create PPT operation with template completed");

			// Verify results
			System.out.println("Starting result verification...");
			assertNotNull(createResult);
			System.out.println("Verification result is not null: success");
			assertTrue(createResult.getOutput().contains("success"));
			System.out.println("Verification result contains success information: success");

			// Restore file creation verification
			Path pptPath = tempDir.resolve("extensions/pptGenerator/" + fileName);
			System.out.println("Verifying file creation: " + pptPath);
			assertTrue(Files.exists(pptPath));
			System.out.println("Verification file exists: success");

			System.out.println("===== getTemplate operation test completed =====");
		}
		else {
			System.out.println("Verification result: no template file found, skipping getTemplate operation test");
		}

		System.out.println("===== Test completed: template application test =====");
	}

}
