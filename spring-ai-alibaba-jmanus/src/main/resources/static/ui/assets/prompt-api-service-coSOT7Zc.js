var r=Object.defineProperty;var n=(s,t,e)=>t in s?r(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var a=(s,t,e)=>n(s,typeof t!="symbol"?t+"":t,e);class i{static async getAll(){const t=await fetch(this.BASE_URL);if(!t.ok)throw new Error(`Failed to fetch prompts: ${t.statusText}`);return t.json()}static async getAllByNamespace(t){const e=await fetch(`${this.BASE_URL}/namespace/${t}`);if(!e.ok)throw new Error(`Failed to fetch prompts for namespace ${t}: ${e.statusText}`);return e.json()}static async getById(t){const e=await fetch(`${this.BASE_URL}/${t}`);if(!e.ok)throw new Error(`Failed to fetch prompt ${t}: ${e.statusText}`);return e.json()}static async create(t){const e=await fetch(this.BASE_URL,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw new Error(`Failed to create prompt: ${e.statusText}`);return e.json()}static async update(t,e){const o=await fetch(`${this.BASE_URL}/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!o.ok)throw new Error(`Failed to update prompt ${t}: ${o.statusText}`);return o.json()}static async delete(t){const e=await fetch(`${this.BASE_URL}/${t}`,{method:"DELETE"});if(!e.ok)throw new Error(`Failed to delete prompt ${t}: ${e.statusText}`)}static async getSupportedLanguages(){const t=await fetch(`${this.BASE_URL}/languages`);if(!t.ok)throw new Error(`Failed to fetch supported languages: ${t.statusText}`);return t.json()}static async importSpecificPromptFromLanguage(t,e){const o=await fetch(`${this.BASE_URL}/import/${t}/language/${e}`,{method:"POST"});if(!o.ok)throw new Error(`Failed to import specific prompt ${t} for language ${e}: ${o.statusText}`)}static async importAllPromptsFromLanguage(t){const e=await fetch(`/admin/prompts/switch-language?language=${t}`,{method:"POST"});if(!e.ok)throw new Error(`Failed to switch all prompts to language ${t}: ${e.statusText}`)}}a(i,"BASE_URL","/api/prompt");export{i as PromptApiService};
