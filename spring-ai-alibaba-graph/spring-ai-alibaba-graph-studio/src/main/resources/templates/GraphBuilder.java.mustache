package {{packageName}}.graph;

import com.alibaba.cloud.ai.graph.CompiledGraph;
import com.alibaba.cloud.ai.graph.KeyStrategy;
import com.alibaba.cloud.ai.graph.StateGraph;
import com.alibaba.cloud.ai.graph.action.AsyncNodeAction;
import com.alibaba.cloud.ai.graph.exception.GraphStateException;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;
import org.springframework.ai.chat.model.ChatModel;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

import static com.alibaba.cloud.ai.graph.StateGraph.END;
import static com.alibaba.cloud.ai.graph.StateGraph.START;

{{#hasRetriever}}
import org.springframework.ai.embedding.EmbeddingModel;
import org.springframework.ai.reader.TextReader;
import org.springframework.ai.transformer.splitter.TokenTextSplitter;
import org.springframework.ai.vectorstore.SimpleVectorStore;
import org.springframework.ai.vectorstore.VectorStore;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
{{/hasRetriever}}

@Component
public class GraphBuilder {
    {{#hasRetriever}}
    // todo: add your knowledge base
    @Value("${rag.source:classpath:${}")
    private Resource ragSource;
    {{/hasRetriever}}

    @Bean
    public CompiledGraph buildGraph(
        ChatModel chatModel
        {{#hasRetriever}}, VectorStore vectorStore{{/hasRetriever}}
        ) throws GraphStateException {
        ChatClient chatClient = ChatClient.builder(chatModel).defaultAdvisors(new SimpleLoggerAdvisor()).build();

        // new stateGraph
        StateGraph stateGraph = new StateGraph({{stateSection}});
        // add nodes
        {{nodeSection}}
        // add edges
        {{edgeSection}}
        return stateGraph.compile();
    }

    {{#hasRetriever}}
        @Bean
        public VectorStore customVectorStore(EmbeddingModel embeddingModel) {
            var chunks = new TokenTextSplitter()
                .transform(new TextReader(ragSource).read());
            SimpleVectorStore vectorStore = SimpleVectorStore
                .builder(embeddingModel)
                .build();
            vectorStore.write(chunks);
            return vectorStore;
        }
    {{/hasRetriever}}
}
